{
  "sourceCode": "",
  "sourceCodeClassname": "MicrosoftProxyStub",
  "encoding": "base64",
  "signature": ""
}
